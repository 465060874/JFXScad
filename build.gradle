apply plugin: 'java'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = 'eu.mihosoft.vrl.fxscad.Main'
}

repositories {
    mavenCentral()

    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/' 
    }
    
    maven {
        url 'http://snapshots.repository.codehaus.org/'
    }
}

dependencies {
    // TODO: Add dependencies here ...
    // You can read more about how to add dependency here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies
    testCompile group: 'junit', name: 'junit', version: '4.10'
    
    compile group: 'org.fxmisc.richtext', name: 'richtextfx', version: '1.0.0-SNAPSHOT'
    compile group: 'org.fxmisc.richtext', name: 'richtextfx', version: '1.0.0-SNAPSHOT', classifier: 'sources'
    
    
//    compile group: 'org.codehaus.groovy', name: 'groovy', version:'2.3.0-SNAPSHOT';
//    compile group: 'org.codehaus.groovy', name: 'groovy', version:'2.3.0-SNAPSHOT', classifier: 'sources';
//    compile group: 'org.codehaus.groovy', name: 'groovy', version:'2.3.0-SNAPSHOT', classifier: 'javadoc';

    compile group: 'org.codehaus.groovy', name: 'groovy', version:'2.2.1';
    compile group: 'org.codehaus.groovy', name: 'groovy', version:'2.2.1', classifier: 'sources';
    compile group: 'org.codehaus.groovy', name: 'groovy', version:'2.2.1', classifier: 'javadoc';
    
    compile fileTree (dir: '/Users/miho/EigeneApps/JavaCSG/build/libs/', includes: ['*.jar'])
}

// create a fat-jar (class files plus dependencies
// excludes VRL.jar (plugin jar files must not start with 'vrl-\\d+')
jar {

    // dependencies except VRL
    from configurations.runtime.asFileTree.
        filter({file->return !file.name.startsWith("vrl-0")}).
        files.collect { zipTree(it) }

    // project class files compiled from source
    from files(sourceSets.main.output.classesDir)
    
    manifest { attributes 'Main-Class': mainClass }
}

task run(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = mainClass;
}
